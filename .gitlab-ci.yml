image: node:19-alpine

cache:
  paths:
    - node_modules/
    - dist/
    - docs/

stages:
  - .pre
  - build
  - lint
  - test
  - security
  - deploy
  # for ecs template
  - review
  - dast
  - production
  - cleanup

.resolve-bash-git-for-alpine:
  image: node:19-alpine
  before_script:
    - |
      apk add bash
      apk add git

.resolve-core:
  before_script: |
    git config --system credential.helper store
    echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com" > ~/.git-credentials
    bash scripts/init.sh

.resolve-submodule: &resolve-submodule
  before_script:
    - !reference [.resolve-bash-git-for-alpine, before_script]
    - !reference [.resolve-core, before_script]

variables:
  APP_NAME: syncday-api
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

init:
  stage: .pre
  script:
    - npm install
  only:
    - main
    - develop

build:
  <<: *resolve-submodule
  stage: build
  image: node:19-alpine
  needs:
    - init
  script: |
    npm run build
  artifacts:
    when: on_success
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "develop"'

lint:
  <<: *resolve-submodule
  stage: test
  needs:
    - build
  script: |
    npm run lint
  only:
    - main
    - develop

test:
  <<: *resolve-submodule
  stage: test
  needs:
    - build
  script: |
    npm run test
  only:
    - main
    - develop

build-docs-with-coverage:
  <<: *resolve-submodule
  stage: deploy
  needs:
    - lint
    - test
  script: |
    npm i -D @compodoc/compodoc
    npm i -D nyc
    yarn run test:coverage
    yarn run build:docs
  only:
    - main
    - develop

deploy-docs-to-s3:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  needs:
    - build-docs-with-coverage
  script: |
    aws s3 sync ./docs s3://$S3_BUCKET --delete --acl public-read
  variables:
    S3_BUCKET: "docs.sync.day"
  only:
    - main
    - develop

upload-container-repository:
  <<: *resolve-submodule
  stage: deploy
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  needs:
    - lint
    - test
  services:
    - docker:dind
  environment:
    name: production
  before_script:
    - |
      # Install git
      yum install -y git
      # Install docker
      amazon-linux-extras install docker
      aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REPOSITORY_URL
    - !reference [.resolve-core, before_script]
  script: |
    yum install -y curl
    curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    cp ./.secure_files/.env.production ./.env.production
    docker build -t $APP_NAME .
    docker tag $APP_NAME:latest $ECR_REPOSITORY_URL/$APP_NAME:latest
    docker push $ECR_REPOSITORY_URL/$APP_NAME:latest
    docker logout
  only:
    - main

deploy-to-production:
  stage: deploy
  dependencies:
    - lint
    - test
    - upload-container-repository
  needs:
    - lint
    - test
    - upload-container-repository
  environment:
    name: production
    url: https://api.sync.day
  script:
    - echo "Deploy to production"
  only:
    - main
include:
  - template: AWS/Deploy-ECS.gitlab-ci.yml
    rules:
      - if: $CI_COMMIT_BRANCH == "main"

deploy-to-development:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  environment: development
  dependencies:
    - lint
    - test
  before_script:
    - apt-get update -y && apt-get -y install openssh-server
    - curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
    - dpkg -i session-manager-plugin.deb
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash  #download secure files(https://docs.gitlab.com/ee/ci/secure_files/index.html)
  script:
    # SSH over Session Manager
    - mkdir $HOME/.ssh
    - echo -e "host i-* mi-*\n
          ProxyCommand sh -c \"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'\"" > $HOME/.ssh/config
    - cp ./.secure_files/syncday.pem ./syncday.pem && chmod 400 syncday.pem
    - cp ./.secure_files/.env.dev ./.env.dev
    - bash ./scripts/deploy-to-dev.sh $DEV_EC2_INSTANCE_ID
  only:
    - develop
