image: node:19-alpine

cache:
  key: ${CI_COMMIT_BRANCH}
  paths:
    - node_modules/
    - dist/
    - docs/

stages:
  - .pre
  - build
  - lint
  - test
  - security
  - deploy
  - stop

.resolve-bash-git-for-alpine:
  image: node:19-alpine
  before_script:
    - |
      apk add bash
      apk add git

.resolve-core: &resolve-core
  before_script: |
    git config --system credential.helper store
    echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com" > ~/.git-credentials
    bash scripts/init.sh

.resolve-submodule: &resolve-submodule
  before_script:
    - !reference [.resolve-bash-git-for-alpine, before_script]
    - !reference [.resolve-core, before_script]

.resolve-variables-by-env: &resolve-variables-by-env
  before_script:
    - |
      if [[ $CI_COMMIT_BRANCH == "main" ]]; then
        ENV=production
        CI_ENVIRONMENT_NAME=production
        APP_NAME=syncday-api
        DOCKER_FILE=Dockerfile
      fi

.upload-container-repository: &upload-container-repository
  <<: *resolve-submodule
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  needs:
    - lint
    - unit-test
  services:
    - docker:dind
  before_script:
    - !reference [.resolve-variables-by-env, before_script]
    - |
      apt-get update && apt-get install -y git
      # Install Docker
      curl -fsSL https://get.docker.com -o get-docker.sh
      sh get-docker.sh
      # Install AWS CLI
      apt-get install -y awscli
      aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REPOSITORY_URL
    - !reference [.resolve-core, before_script]
  script: |
    curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    cp ./.secure_files/.env.production ./.env.production
    docker build -t $APP_NAME -f $DOCKER_FILE .
    docker tag $APP_NAME:latest $ECR_REPOSITORY_URL/$APP_NAME:latest
    docker push $ECR_REPOSITORY_URL/$APP_NAME:latest
    docker logout

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

init:
  stage: .pre
  script:
    - !reference [.resolve-variables-by-env, before_script]
    - |
      echo "DYNAMIC_ENVIRONMENT_NAME=$EMV" >> deploy.env    # Add the value to a dotenv file.

      npm install
  only:
    - main

build:
  <<: *resolve-submodule
  stage: build
  image: node:19-alpine
  needs:
    - init
  script: |
    npm run build
  artifacts:
    when: on_success
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

lint:
  <<: *resolve-submodule
  stage: lint
  needs:
    - build
  script: |
    npm run lint
  only:
    - main

unit-test:
  <<: *resolve-submodule
  stage: test
  needs:
    - build
  script: |
    npm run test:ci
  only:
    - main
  artifacts:
    when: always
    paths:
      - coverage/junit-report.xml
    reports:
      junit: coverage/junit-report.xml

upload-production-container-repository:
  <<: *upload-container-repository
  stage: deploy
  environment: production
  needs:
    - unit-test
  only:
    - main

deploy-to-production:
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-ecs:latest
  stage: deploy
  environment:
    name: production
    on_stop: stop-deploy
  dependencies:
    - upload-production-container-repository
  needs:
    - upload-production-container-repository
  before_script:
    - !reference [.resolve-variables-by-env, before_script]
  script:
    - cp $CI_AWS_ECS_TASK_DEFINITION_FILE task-definition.json
    - aws ecs register-task-definition --cli-input-json file://task-definition.json --family $CI_AWS_ECS_TASK_DEFINITION
    - aws ecs update-service --cluster $CI_AWS_ECS_CLUSTER --service $CI_AWS_ECS_SERVICE --task-definition $CI_AWS_ECS_TASK_DEFINITION --force-new-deployment
  only:
    - main

stop-deploy:
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-ecs:latest
  environment:
    name: production
    action: stop
  stage: stop
  allow_failure: true
  script:
    - ecs stop-task
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG != null'
      when: manual
    - when: never
