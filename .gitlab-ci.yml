default:
  image: node:19-alpine

cache:
  paths:
    - node_modules/
    - dist/

stages:
  - .pre
  - build
  - lint
  - test
  - security
  - deploy
  # for ecs template
  - review
  - dast
  - production
  - cleanup

variables:
  APP_NAME: syncday-api
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

init:
  stage: .pre
  script:
    - npm install

build-production:
  stage: build
  needs:
    - init
  script:
    - npm run build
  artifacts:
    when: on_success
    paths:
      - dist/
    expire_in: 1 week

lint:
  stage: test
  needs:
    - build-production
  script:
    - npm run lint

test:
  stage: test
  needs:
    - build-production
  script:
    - npm run test

upload-container-repository:
  stage: deploy
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  needs:
    - lint
    - test
  variables:
    NODE_ENV: production
  services:
    - docker:dind
  before_script: |
    amazon-linux-extras install docker
    aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REPOSITORY_URL
  script: |
    echo "Upload container image to AWS ECR repository"
    cat $DOTENV > .env.production
    docker build -t $APP_NAME .
    docker tag $APP_NAME:latest $ECR_REPOSITORY_URL/$APP_NAME:latest
    docker push $ECR_REPOSITORY_URL/$APP_NAME:latest
  after_script:
    - docker logout
  only:
    - main

deploy-to-production:
  stage: deploy
  dependencies:
    - lint
    - test
    - upload-container-repository
  variables:
    NODE_ENV: production
  environment:
    name: production
    url: https://api.sync.day
  only:
    - main
  script:
    - echo "Deploy to production"
include:
  - template: AWS/Deploy-ECS.gitlab-ci.yml
    rules:
      - if: $CI_COMMIT_BRANCH == "main"
